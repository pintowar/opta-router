/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/solver/{id}/detailed-path/{status}": {
    put: operations["detailedPath"];
  };
  "/api/solver/{id}/solve": {
    post: operations["solve"];
  };
  "/api/solver/{id}/terminate": {
    get: operations["terminateEarly"];
  };
  "/api/solver/{id}/solution-state": {
    get: operations["solutionState"];
  };
  "/api/solver/{id}/clean": {
    get: operations["clean"];
  };
  "/api/instances": {
    get: operations["index"];
  };
  "/api/instances/{id}/show": {
    get: operations["show"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    SolverState: {
      status: string;
      detailedPath: boolean;
    };
    Instance: {
      /** Format: int64 */
      id: number;
      name: string;
      /** Format: int32 */
      nLocations?: number;
      /** Format: int32 */
      nVehicles?: number;
      /** Format: int32 */
      capacity: number;
      stops: components["schemas"]["Point"][];
      depots: number[];
      /** Format: int32 */
      nlocations: number;
      /** Format: int32 */
      nvehicles: number;
    };
    Point: {
      /** Format: int64 */
      id: number;
      /** Format: double */
      lat: number;
      /** Format: double */
      lng: number;
      name: string;
      /** Format: int32 */
      demand: number;
    };
    Route: {
      distance: number;
      time: number;
      order: components["schemas"]["Point"][];
      customerIds: number[];
    };
    VrpSolution: {
      /** Format: int64 */
      instanceId: number;
      routes: components["schemas"]["Route"][];
      totalDistance: number;
      totalTime: Record<string, never>;
    };
    VrpSolutionState: {
      solution: components["schemas"]["VrpSolution"];
      state: components["schemas"]["SolverState"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {
  detailedPath: {
    parameters: {
      path: {
        id: number;
        status: boolean;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SolverState"];
        };
      };
    };
  };
  solve: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Instance"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SolverState"];
        };
      };
    };
  };
  terminateEarly: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SolverState"];
        };
      };
    };
  };
  solutionState: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["VrpSolutionState"];
        };
      };
    };
  };
  clean: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SolverState"];
        };
      };
    };
  };
  index: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Instance"][];
        };
      };
    };
  };
  show: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Instance"];
        };
      };
    };
  };
}

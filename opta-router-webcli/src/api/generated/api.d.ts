/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/solver/{id}/detailed-path/{isDetailed}": {
    put: operations["detailedPath"];
  };
  "/api/solver/{id}/solve": {
    post: operations["solve"];
  };
  "/api/solver/{id}/terminate": {
    get: operations["terminateEarly"];
  };
  "/api/solver/{id}/solution-state": {
    get: operations["solutionState"];
  };
  "/api/solver/{id}/clean": {
    get: operations["clean"];
  };
  "/api/solutions": {
    get: operations["index"];
  };
  "/api/solutions/by-instance-id/{id}/show": {
    get: operations["show"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Coordinate: {
      /** Format: double */
      lat: number;
      /** Format: double */
      lng: number;
    };
    Customer: {
      /** Format: int64 */
      id: number;
      name: string;
      /** Format: int32 */
      demand: number;
      location: components["schemas"]["Location"];
    };
    Depot: {
      /** Format: int64 */
      id: number;
      name: string;
      location: components["schemas"]["Location"];
    };
    Location: {
      /** Format: int64 */
      id: number;
      name: string;
      /** Format: double */
      lat: number;
      /** Format: double */
      lng: number;
    };
    PanelSolutionState: {
      solverPanel: components["schemas"]["SolverPanel"];
      solutionState: components["schemas"]["VrpSolutionRegistry"];
    };
    Route: {
      distance: number;
      time: number;
      /** Format: int32 */
      totalDemand: number;
      order: components["schemas"]["Coordinate"][];
      customerIds: number[];
    };
    RouteInstance: {
      /** Format: int64 */
      id: number;
      name: string;
      vehicles: components["schemas"]["Vehicle"][];
      customers: components["schemas"]["Customer"][];
      depots: components["schemas"]["Depot"][];
      locations: components["schemas"]["Location"][];
      /** Format: int32 */
      nlocations: number;
      /** Format: int32 */
      nvehicles: number;
    };
    SolverPanel: {
      isDetailedPath: boolean;
    };
    Vehicle: {
      /** Format: int64 */
      id: number;
      name: string;
      /** Format: int32 */
      capacity: number;
      depot: components["schemas"]["Depot"];
    };
    VrpSolution: {
      instance: components["schemas"]["RouteInstance"];
      routes: components["schemas"]["Route"][];
      empty: boolean;
      totalDistance: number;
      totalTime: Record<string, never>;
    };
    VrpSolutionRegistry: {
      solution: components["schemas"]["VrpSolution"];
      /** @enum {string} */
      state: "ENQUEUED" | "NOT_SOLVED" | "RUNNING" | "TERMINATED";
      /** Format: uuid */
      solverKey?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {
  detailedPath: {
    parameters: {
      path: {
        id: number;
        isDetailed: boolean;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": "ENQUEUED" | "NOT_SOLVED" | "RUNNING" | "TERMINATED";
        };
      };
    };
  };
  solve: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": "ENQUEUED" | "NOT_SOLVED" | "RUNNING" | "TERMINATED";
        };
      };
    };
  };
  terminateEarly: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": "ENQUEUED" | "NOT_SOLVED" | "RUNNING" | "TERMINATED";
        };
      };
    };
  };
  solutionState: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PanelSolutionState"];
        };
      };
    };
  };
  clean: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": "ENQUEUED" | "NOT_SOLVED" | "RUNNING" | "TERMINATED";
        };
      };
    };
  };
  index: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["VrpSolution"][];
        };
      };
    };
  };
  show: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["VrpSolution"];
        };
      };
    };
  };
}

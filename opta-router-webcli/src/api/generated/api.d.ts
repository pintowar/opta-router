/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/vrp-vehicles/{id}/update": {
    put: operations["update"];
  };
  "/api/vrp-problems/{id}/update": {
    put: operations["update_1"];
  };
  "/api/vrp-locations/{id}/update": {
    put: operations["update_2"];
  };
  "/api/solver/{id}/detailed-path/{isDetailed}": {
    put: operations["detailedPath"];
  };
  "/api/vrp-vehicles/insert": {
    post: operations["insert"];
  };
  "/api/vrp-problems/{id}/copy": {
    post: operations["copy"];
  };
  "/api/vrp-problems": {
    get: operations["index_1"];
    post: operations["create"];
  };
  "/api/vrp-locations/insert": {
    post: operations["insert_1"];
  };
  "/api/solver/{id}/terminate": {
    post: operations["terminate"];
  };
  "/api/solver/{id}/solve/{solverName}": {
    post: operations["solve"];
  };
  "/api/solver/{id}/clean": {
    post: operations["clear"];
  };
  "/api/vrp-vehicles": {
    get: operations["index"];
  };
  "/api/vrp-vehicles/by-depots": {
    get: operations["listByDepot"];
  };
  "/api/vrp-problems/{id}": {
    get: operations["show"];
  };
  "/api/vrp-locations": {
    get: operations["index_2"];
  };
  "/api/vrp-locations/{kind}": {
    get: operations["list"];
  };
  "/api/solver/{id}/solution-panel": {
    get: operations["solutionState"];
  };
  "/api/solver/solver-names": {
    get: operations["solverNames"];
  };
  "/api/solver-history/{problemId}/solutions": {
    get: operations["solutions"];
  };
  "/api/solver-history/{problemId}/requests/{solverName}": {
    get: operations["requests"];
  };
  "/api/vrp-vehicles/{id}/remove": {
    delete: operations["remove"];
  };
  "/api/vrp-problems/{id}/remove": {
    delete: operations["remove_1"];
  };
  "/api/vrp-locations/{id}/remove": {
    delete: operations["remove_2"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Depot: {
      /** Format: int64 */
      id: number;
      name: string;
      /** Format: double */
      lat: number;
      /** Format: double */
      lng: number;
    };
    Vehicle: {
      /** Format: int64 */
      id: number;
      name: string;
      /** Format: int32 */
      capacity: number;
      depot: components["schemas"]["Depot"];
    };
    Customer: {
      /** Format: int64 */
      id: number;
      name: string;
      /** Format: double */
      lat: number;
      /** Format: double */
      lng: number;
      /** Format: int32 */
      demand: number;
    };
    Location: {
      name: string;
      /** Format: int64 */
      id: number;
      /** Format: double */
      lat: number;
      /** Format: double */
      lng: number;
    };
    VrpProblem: {
      /** Format: int64 */
      id: number;
      name: string;
      vehicles: components["schemas"]["Vehicle"][];
      customers: components["schemas"]["Customer"][];
      depots: components["schemas"]["Depot"][];
      locations: components["schemas"]["Location"][];
      /** Format: int32 */
      nlocations: number;
      /** Format: int32 */
      nvehicles: number;
    };
    LocationRequest: {
      /** Format: int64 */
      id: number;
      name: string;
      /** Format: double */
      lat: number;
      /** Format: double */
      lng: number;
      /** Format: int32 */
      demand?: number;
    };
    PageVehicle: {
      /** Format: int32 */
      totalPages?: number;
      /** Format: int64 */
      totalElements?: number;
      first?: boolean;
      last?: boolean;
      /** Format: int32 */
      size?: number;
      content?: components["schemas"]["Vehicle"][];
      /** Format: int32 */
      number?: number;
      sort?: components["schemas"]["SortObject"];
      /** Format: int32 */
      numberOfElements?: number;
      pageable?: components["schemas"]["PageableObject"];
      empty?: boolean;
    };
    PageableObject: {
      /** Format: int64 */
      offset?: number;
      sort?: components["schemas"]["SortObject"];
      /** Format: int32 */
      pageNumber?: number;
      /** Format: int32 */
      pageSize?: number;
      paged?: boolean;
      unpaged?: boolean;
    };
    SortObject: {
      empty?: boolean;
      sorted?: boolean;
      unsorted?: boolean;
    };
    PageVrpProblemSummary: {
      /** Format: int32 */
      totalPages?: number;
      /** Format: int64 */
      totalElements?: number;
      first?: boolean;
      last?: boolean;
      /** Format: int32 */
      size?: number;
      content?: components["schemas"]["VrpProblemSummary"][];
      /** Format: int32 */
      number?: number;
      sort?: components["schemas"]["SortObject"];
      /** Format: int32 */
      numberOfElements?: number;
      pageable?: components["schemas"]["PageableObject"];
      empty?: boolean;
    };
    VrpProblemSummary: {
      /** Format: int64 */
      id: number;
      name: string;
      /** Format: int32 */
      nLocations?: number;
      /** Format: int32 */
      nVehicles?: number;
      /** Format: int32 */
      totalCapacity: number;
      /** Format: int32 */
      totalDemand: number;
      /** Format: int32 */
      numEnqueuedRequests: number;
      /** Format: int32 */
      numRunningRequests: number;
      /** Format: int32 */
      numTerminatedRequests: number;
      /** Format: int32 */
      numSolverRequests: number;
      /** Format: int32 */
      nlocations: number;
      /** Format: int32 */
      nvehicles: number;
    };
    PageLocation: {
      /** Format: int32 */
      totalPages?: number;
      /** Format: int64 */
      totalElements?: number;
      first?: boolean;
      last?: boolean;
      /** Format: int32 */
      size?: number;
      content?: components["schemas"]["Location"][];
      /** Format: int32 */
      number?: number;
      sort?: components["schemas"]["SortObject"];
      /** Format: int32 */
      numberOfElements?: number;
      pageable?: components["schemas"]["PageableObject"];
      empty?: boolean;
    };
    LatLng: {
      /** Format: double */
      lat: number;
      /** Format: double */
      lng: number;
    };
    PanelSolutionState: {
      solverPanel: components["schemas"]["SolverPanel"];
      solutionState: components["schemas"]["VrpSolutionRequest"];
    };
    Route: {
      distance: number;
      time: number;
      /** Format: int32 */
      totalDemand: number;
      order: components["schemas"]["LatLng"][];
      customerIds: number[];
    };
    SolverPanel: {
      isDetailedPath: boolean;
    };
    VrpSolution: {
      problem: components["schemas"]["VrpProblem"];
      routes: components["schemas"]["Route"][];
      empty: boolean;
      totalDistance: number;
      feasible: boolean;
      totalTime: Record<string, never>;
    };
    VrpSolutionRequest: {
      solution: components["schemas"]["VrpSolution"];
      /** @enum {string} */
      status: "ENQUEUED" | "NOT_SOLVED" | "RUNNING" | "TERMINATED";
      /** Format: uuid */
      solverKey?: string;
    };
    VrpSolverObjective: {
      /** Format: double */
      objective: number;
      solver: string;
      /** @enum {string} */
      status: "ENQUEUED" | "NOT_SOLVED" | "RUNNING" | "TERMINATED";
      /** Format: uuid */
      solverKey: string;
      /** Format: date-time */
      createdAt: string;
    };
    VrpSolverRequest: {
      /** Format: uuid */
      requestKey: string;
      /** Format: int64 */
      problemId: number;
      solver: string;
      /** @enum {string} */
      status: "ENQUEUED" | "NOT_SOLVED" | "RUNNING" | "TERMINATED";
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  update: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  update_1: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VrpProblem"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  update_2: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LocationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  detailedPath: {
    parameters: {
      path: {
        id: number;
        isDetailed: boolean;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": "ENQUEUED" | "NOT_SOLVED" | "RUNNING" | "TERMINATED";
        };
      };
    };
  };
  insert: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  copy: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VrpProblem"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  index_1: {
    parameters: {
      query?: {
        page?: number;
        size?: number;
        q?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PageVrpProblemSummary"];
        };
      };
    };
  };
  create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["VrpProblem"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  insert_1: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LocationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  terminate: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": "ENQUEUED" | "NOT_SOLVED" | "RUNNING" | "TERMINATED";
        };
      };
    };
  };
  solve: {
    parameters: {
      path: {
        id: number;
        solverName: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": "ENQUEUED" | "NOT_SOLVED" | "RUNNING" | "TERMINATED";
        };
      };
    };
  };
  clear: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": "ENQUEUED" | "NOT_SOLVED" | "RUNNING" | "TERMINATED";
        };
      };
    };
  };
  index: {
    parameters: {
      query?: {
        page?: number;
        size?: number;
        q?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PageVehicle"];
        };
      };
    };
  };
  listByDepot: {
    parameters: {
      query?: {
        ids?: number[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Vehicle"][];
        };
      };
    };
  };
  show: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["VrpProblem"];
        };
      };
    };
  };
  index_2: {
    parameters: {
      query?: {
        page?: number;
        size?: number;
        q?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PageLocation"];
        };
      };
    };
  };
  list: {
    parameters: {
      path: {
        kind: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Location"][];
        };
      };
    };
  };
  solutionState: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PanelSolutionState"];
        };
      };
    };
  };
  solverNames: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": string[];
        };
      };
    };
  };
  solutions: {
    parameters: {
      path: {
        problemId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["VrpSolverObjective"][];
        };
      };
    };
  };
  requests: {
    parameters: {
      path: {
        problemId: number;
        solverName: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["VrpSolverRequest"][];
        };
      };
    };
  };
  remove: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  remove_1: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  remove_2: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
}
